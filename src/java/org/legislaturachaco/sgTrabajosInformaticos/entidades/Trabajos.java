//
// This file was generated by the JPA Modeler
//
package org.legislaturachaco.sgTrabajosInformaticos.entidades;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
@Table(name = "trabajos")

public class Trabajos implements Serializable {
    public static final int LONG_MAX_SINTOMAS= 500;

    @OneToMany(targetEntity = ProblemasDetectados.class, mappedBy = "idTrabajo")
    private List<ProblemasDetectados> problemasDetectadosCollection;

    @Column(name = "idTrabajo", table = "trabajos", nullable = false)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer idTrabajo;

    @Column(name = "nroFicha", table = "trabajos", nullable = false)
    @Basic
    private int nroFicha;

    @ManyToOne(optional = false, targetEntity = Usuarios.class)
    @JoinColumn(name = "usuarioIniciador")
    private Usuarios usuarioIniciador;

    @OneToMany(targetEntity = EstadosXTrabajo.class, mappedBy = "idTrabajo")
    private List<EstadosXTrabajo> estadosXTrabajoCollection;

    @OneToMany(targetEntity = PatrimoniosXTrabajos.class, mappedBy = "idTrabajo")
    private List<PatrimoniosXTrabajos> patrimoniosXTrabajosCollection;

    @Column(name = "fechaComienzo", table = "trabajos", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    @Basic
    private Date fechaComienzo;

    @ManyToOne(targetEntity = Notas.class)
    @JoinColumn(name = "idNota")
    private Notas idNota;

    @ManyToOne(optional = false, targetEntity = Prioridades.class)
    @JoinColumn(name = "idPrioridad")
    private Prioridades idPrioridad;

    @ManyToOne(optional = false, targetEntity = Dependencias.class)
    @JoinColumn(name = "idDependencia")
    private Dependencias idDependencia;

    @Column(name = "sintomas", table = "trabajos", length = 500)
    @Basic
    private String sintomas;

    @Column(name = "fechaFin", table = "trabajos")
    @Temporal(TemporalType.TIMESTAMP)
    @Basic
    private Date fechaFin;

    public Trabajos() {

    }

    public List<ProblemasDetectados> getProblemasDetectadosCollection() {
        return this.problemasDetectadosCollection;
    }

    public void setProblemasDetectadosCollection(List<ProblemasDetectados> problemasDetectadosCollection) {
        this.problemasDetectadosCollection = problemasDetectadosCollection;
    }

    public Integer getIdTrabajo() {
        return this.idTrabajo;
    }

    public void setIdTrabajo(Integer idTrabajo) {
        this.idTrabajo = idTrabajo;
    }

    public int getNroFicha() {
        return this.nroFicha;
    }

    public void setNroFicha(int nroFicha) {
        this.nroFicha = nroFicha;
    }

    public Usuarios getUsuarioIniciador() {
        return this.usuarioIniciador;
    }

    public void setUsuarioIniciador(Usuarios usuarioIniciador) {
        this.usuarioIniciador = usuarioIniciador;
    }

    public List<EstadosXTrabajo> getEstadosXTrabajoCollection() {
        return this.estadosXTrabajoCollection;
    }

    public void setEstadosXTrabajoCollection(List<EstadosXTrabajo> estadosXTrabajoCollection) {
        this.estadosXTrabajoCollection = estadosXTrabajoCollection;
    }

    public List<PatrimoniosXTrabajos> getPatrimoniosXTrabajosCollection() {
        return this.patrimoniosXTrabajosCollection;
    }

    public void setPatrimoniosXTrabajosCollection(List<PatrimoniosXTrabajos> patrimoniosXTrabajosCollection) {
        this.patrimoniosXTrabajosCollection = patrimoniosXTrabajosCollection;
    }

    public Date getFechaComienzo() {
        return this.fechaComienzo;
    }

    public void setFechaComienzo(Date fechaComienzo) {
        this.fechaComienzo = fechaComienzo;
    }

    public Notas getIdNota() {
        return this.idNota;
    }

    public void setIdNota(Notas idNota) {
        this.idNota = idNota;
    }

    public Prioridades getIdPrioridad() {
        return this.idPrioridad;
    }

    public void setIdPrioridad(Prioridades idPrioridad) {
        this.idPrioridad = idPrioridad;
    }

    public Dependencias getIdDependencia() {
        return this.idDependencia;
    }

    public void setIdDependencia(Dependencias idDependencia) {
        this.idDependencia = idDependencia;
    }

    public String getSintomas() {
        return this.sintomas;
    }

    public void setSintomas(String sintomas) {
        this.sintomas = sintomas;
    }

    public Date getFechaFin() {
        return this.fechaFin;
    }

    public void setFechaFin(Date fechaFin) {
        this.fechaFin = fechaFin;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 31 * hash + Objects.hashCode(this.idTrabajo);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Trabajos other = (Trabajos) obj;
        if (!Objects.equals(this.idTrabajo, other.idTrabajo)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Trabajos{" + "idTrabajo=" + idTrabajo + ", nroFicha=" + nroFicha + ", fechaComienzo=" + fechaComienzo + ", idNota=" + idNota + ", idPrioridad=" + idPrioridad + ", idDependencia=" + idDependencia + '}';
    }
    
    
}
