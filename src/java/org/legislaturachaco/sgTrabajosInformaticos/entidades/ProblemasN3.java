//
// This file was generated by the JPA Modeler
//
package org.legislaturachaco.sgTrabajosInformaticos.entidades;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

@Entity
@Table(name = "problemasN3", uniqueConstraints = @UniqueConstraint(columnNames = {"idProblemaN2", "idProblemaN3"}))

public class ProblemasN3 implements Serializable {
    
    public static final int LONG_MAX_PROBLEMA= 45;

    @Column(name = "idProblemaN3", table = "problemasN3", nullable = false)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer idProblemaN3;

    @OneToMany(targetEntity = ProblemasDetectados.class, mappedBy = "idProblemaN3")
    private List<ProblemasDetectados> problemasDetectadosCollection;

    @ManyToOne(optional = false, targetEntity = ProblemasN2.class)
    @JoinColumn(name = "idProblemaN2")
    private ProblemasN2 idProblemaN2;

    @OneToMany(targetEntity = TareasXProblemas.class, mappedBy = "idProblemaN3")
    private List<TareasXProblemas> tareasXProblemasCollection;

    @Column(name = "problema", table = "problemasN3", nullable = false, length = 45)
    @Basic
    private String problema;

    public ProblemasN3() {

    }

    public Integer getIdProblemaN3() {
        return this.idProblemaN3;
    }

    public void setIdProblemaN3(Integer idProblemaN3) {
        this.idProblemaN3 = idProblemaN3;
    }

    public List<ProblemasDetectados> getProblemasDetectadosCollection() {
        return this.problemasDetectadosCollection;
    }

    public void setProblemasDetectadosCollection(List<ProblemasDetectados> problemasDetectadosCollection) {
        this.problemasDetectadosCollection = problemasDetectadosCollection;
    }

    public ProblemasN2 getIdProblemaN2() {
        return this.idProblemaN2;
    }

    public void setIdProblemaN2(ProblemasN2 idProblemaN2) {
        this.idProblemaN2 = idProblemaN2;
    }

    public List<TareasXProblemas> getTareasXProblemasCollection() {
        return this.tareasXProblemasCollection;
    }

    public void setTareasXProblemasCollection(List<TareasXProblemas> tareasXProblemasCollection) {
        this.tareasXProblemasCollection = tareasXProblemasCollection;
    }

    public String getProblema() {
        return this.problema;
    }

    public void setProblema(String problema) {
        this.problema = problema;
    }
    
    @Override
    public String toString() {
        return problema;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 19 * hash + Objects.hashCode(this.idProblemaN3);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final ProblemasN3 other = (ProblemasN3) obj;
        if (!Objects.equals(this.idProblemaN3, other.idProblemaN3)) {
            return false;
        }
        return true;
    }
    
}
